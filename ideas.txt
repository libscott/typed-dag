

when there’s a new output all the nodes subscribing to this output must run. Nodes are called, given a full list of their inputs (complete or not) and are then able to publish to new outputs.

application restart should be seamless. This means that the successful completion of a job cannot depend on any long held connection.

There should be support for typed and dynamic outputs

Changes to the dag result in a recompile of the application. The application itself may be generated using TemplateHaskell or another mechanism.

you can replay a branch from any given offset. If engines forget their offset it doesn’t matter.

this means that output nodes can be aware of their subscribers and just call each of them in sequence. If there’s a problem, it’ll all re-run and pick up where it left off.

binding to an output is a function call that type checks the caller and output, and adds the caller to a list of callbacks. No reason this can’t use Typeables.

template haskell for generated input references which generates lenses for each of them and allows them to retrieve the lenses. for now just make the lenses and the container type.

state-changes.log

Nodes need to be able to lookup their outputs since otherwise you might need to replay from like the beginning to get other outputs (e.g and input that was provided only once).

Everything is an output. (remember, graph > all other data structures). Everything is replayable in the same manner so different event types aren’t necessary, just different event properties.

* whats the mathematical notation for “contains”?

Private copy of GIT repository would be nice too. Check a file repeatedly for current branch name.


* A "traversal" starts at any point in the dag and has a determinable end.

* this traversal should have a session cache so that if the same node is hit twice then it needn't involve the fs.


-- todo: sessions. a job is:
-- create local branch
-- create session commit. use that for the file outputs.
-- run the session. commit outputs, referencing session commit.
-- commit .done files for each of the outputs, with some new content.
-- use the .done files to find the last run associated with an output.
-- use the git object store as a cache.



locking: Each process optimistically spawn a new thread whenever it has a new piece of work to do.
         this thread will try to obtain a lock (netsem) before running. Netsem should be more
         robust though.


-- use python git library to figure out how to traverse trees and shit.

!! optimistic runs can work off the parent's branch! That way, a node can
-- advise of an output before all outputs are generated. the subscribers can run
-- and all the changes can be merged back when they're done.
